plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlinx-serialization'
    id 'kotlin-kapt'
}

android {
    compileSdk androidCompileSdk

    defaultConfig {
        minSdk androidMinSdk
        targetSdk androidTargetSdk

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
        buildConfigField "String", "NASA_API_KEY", "\"${getProperty("local.properties", "nasa_api_key")}\""
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {

    implementation project(":domain")

    //OkHttp
    implementation "com.squareup.okhttp3:okhttp:4.10.0"
    implementation "com.squareup.okhttp3:logging-interceptor:5.0.0-alpha.5"

    //Retrofit
    implementation "com.squareup.retrofit2:retrofit:2.9.0"
    implementation 'com.squareup.retrofit2:converter-moshi:2.9.0'
    implementation "com.jakewharton.retrofit:retrofit2-kotlinx-serialization-converter:0.8.0"

    //DI
    implementation "io.insert-koin:koin-android:${koinVersion}"
    implementation "io.insert-koin:koin-core:$koinVersion"

    //Persistent storage
    implementation "androidx.room:room-runtime:$roomVersion"
    kapt "androidx.room:room-compiler:$roomVersion"
    implementation "androidx.room:room-ktx:$roomVersion"

    // Json serialization
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.3.2"

    // Mockito Unit Tests
    androidTestImplementation "org.mockito:mockito-core:3.10.0"
    androidTestImplementation "org.mockito:mockito-android:2.25.0"

    // Test Framework
    androidTestImplementation "junit:junit:${junitVersion}"
    androidTestImplementation "androidx.test.ext:junit:${junitVersion}"
    androidTestImplementation "androidx.arch.core:core-testing:2.1.0"

    // Google Truth Test
    androidTestImplementation "com.google.truth:truth:${truthVersion}"

    // Coroutine Test
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.4"
    androidTestImplementation "app.cash.turbine:turbine:${turbineVersion}"

    // Test Framework
    testImplementation "junit:junit:${junitVersion}"
    testImplementation "androidx.test.ext:junit:${junitVersion}"
    testImplementation "androidx.arch.core:core-testing:2.1.0"

    // Google Truth Test
    testImplementation "com.google.truth:truth:${truthVersion}"

    // Coroutine Test
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.4"
    testImplementation "app.cash.turbine:turbine:${turbineVersion}"
}

def getProperty(String filename, String propName) {
    def propsFile = rootProject.file(filename)
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        if (props[propName] != null) {
            return props[propName]
        } else {
            print("No such property " + propName + " in file " + filename)
        }
    } else {
        print(filename + " does not exist!")
    }
}
