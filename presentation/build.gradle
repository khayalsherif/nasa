plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id "androidx.navigation.safeargs.kotlin"
}

android {
    compileSdk androidCompileSdk

    defaultConfig {
        minSdk androidMinSdk
        targetSdk androidTargetSdk

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
        buildConfigField "String", "NASA_API_KEY", "\"${getProperty("local.properties", "nasa_api_key")}\""
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
    }
}

dependencies {

    implementation project(":domain")

    // Core
    implementation 'androidx.core:core-ktx:1.9.0'
    implementation 'androidx.appcompat:appcompat:1.5.1'

    // Material
    implementation 'com.google.android.material:material:1.6.1'

    // Constraint
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    // Navigation
    implementation 'androidx.navigation:navigation-fragment-ktx:2.5.2'
    implementation 'androidx.navigation:navigation-ui-ktx:2.5.2'

    // Koin
    implementation "io.insert-koin:koin-android:${koinVersion}"
    implementation "io.insert-koin:koin-androidx-viewmodel:${koinVersion}"

    // Coil
    implementation("io.coil-kt:coil:2.2.2")

    // Logger
    implementation 'com.jakewharton.timber:timber:4.7.1'

    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${coroutineVersion}"

    // Local Test
    implementation "androidx.test:core:1.4.0"
    implementation 'androidx.test.ext:junit-ktx:1.1.3'
    testImplementation "junit:junit:${junitVersion}"
    testImplementation "org.hamcrest:hamcrest-all:${hamcrestVersion}"
    testImplementation "androidx.arch.core:core-testing:2.1.0"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:${coroutinesTest}"
    testImplementation "com.google.truth:truth:${truthVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation "org.mockito:mockito-inline:${mockitoVersion}"
    testImplementation "app.cash.turbine:turbine:${turbineVersion}"

    // Instrumented Unit Test
    androidTestImplementation "junit:junit:${junitVersion}"
    androidTestImplementation "org.hamcrest:hamcrest-all:${hamcrestVersion}"
    androidTestImplementation "androidx.arch.core:core-testing:${coreTestingVersion}"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:${coroutinesTest}"
    androidTestImplementation "com.google.truth:truth:${truthVersion}"
    androidTestImplementation "org.mockito:mockito-core:${mockitoVersion}"
    androidTestImplementation "org.mockito:mockito-inline:${mockitoVersion}"
    androidTestImplementation "app.cash.turbine:turbine:${turbineVersion}"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:${espressoVersion}"
    androidTestImplementation "io.insert-koin:koin-test:$koinVersion"
    androidTestImplementation "io.insert-koin:koin-test-junit4:$koinVersion"
}


def getProperty(String filename, String propName) {
    def propsFile = rootProject.file(filename)
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        if (props[propName] != null) {
            return props[propName]
        } else {
            print("No such property " + propName + " in file " + filename)
        }
    } else {
        print(filename + " does not exist!")
    }
}
